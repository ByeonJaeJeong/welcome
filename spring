SPRING Framework
-> 애플리케이션을 개발할 수 있는 프레임워크

* Library(라이브러리) : 함수들의 집합. 프로그램을 생성할 때 기존에 만들어져 있는 함수들을 재활용해서 제작시간/노력 감소해서 필요한 동작만 작동하도록 구현된 집합.
					(JDBC, JSTL, EL, ...)
					
* Framework(프레임워크) : 함수들의 집단. 특정 프로그램을 생성할 때 필요한 함수들을 모두 포함하고 있으면서, 해당 프레임워크가 제시하는 방향으로 개발할 수 있도록 만들어놓은 틀.

* EJB(Enterprise JavaBean) 환경에서 SPRING 환경으로 변화
  -> EJB의 환경에서 너무 복잡한 설정 및 기타 장비 필요함. '경량 컨테이너' 라고 불리던 SPRING 프레임워크가 등장하면서 기존의 환경보다 훨씬 가볍고 처리가 간편해서 해당 환경으로 변화가 일어남.
  
* 왜? SPRING 프레임워크를 사용하는 가?> 
  -> 회사(프로젝트1) -> 팀장1-팀원3
  => 프로젝트에 틀을 제공해서 일정 수준의 퀄리티를 보장할 수 있는 개발 방법이기 때문에
  
  => 서버중심의 개발에서(확장성, 유지보수) /2000년
  
  => 클라이언트 중심 개발(생산성, 안정성) => 모바일환경 개발
  
* SPRING 주요 특징
  - POJO(Plain Old Java Object) 기반의 구성
    : 다른 프레임워크와 달리 객체 관계를 구성할 때 별도의 API없이,
      POJO만으로 구성이 가능(JAVA로 구성이 가능)
      => 코드 개발시 개발자가 특정 라이브러리, 컨테이너에 종속적이지 않아도 됨.
      => 가장 일반적인 형태로 구성하고, 실행 가능 => 생산성 향상
      => 코드 테스트 작업자체가 유연하게 처리 가능 => 유지보수 향상
      
  - 제어의 역행(IoC, Inversion Of Control)
    : 메서드, 객체의 호출을 개발자가 결정 하는게 아니라, 외부(Spring)에서 결정되는 것
      ex) 메인보드 -> 램, CPU, ... 결정 => 각 부품의 연결, 호출 등은 메인보드가 알아서 처리 -> 사용자는 부품의 변경시/ 조립시 별다른 고민없이 메인보드에 맞춰서 사용
      
  - 의존성 주입(DI, Dependency Injection)을 통한 객체간의 관계 구성 가능
  * IoC가 발생할 때 스프링 내부에 있는 객체간의 관계를 처리하는 기법 => DI
  : 객체가 혼자서 처리할 수 없을 때 다른 객체의 도움을 받아야하지만 처리가 되는 경우 의존 관계가 있다 => 인터페이스 구현
  => 의존적인 객체를 직접 생성하지 않고, 제어의 역행으로 특정 객체 외부에서 결정하고 연결해서 사용하는 것.
  1) 생성자 사용 주입
  2) setter 메서드 사용 주입
  
  - AOP(Aspect Oriented Programming)의 지원 : 관점지향 프로그래밍
  * OOP(Object oriented Programming) : 객체 지향 프로그래밍
  
  -> AOP : 개발자는 비지니스 로직에만 집중하게 한다.
  ex) 보안, 로그, 트랜잭션, ... 대부분의 시스템에서 필요한 내용 없어서는 안됨
  => '횡단 관심사(cross-concern)'
  1) 핵심 비지니스 로직에 집중
  2) 프로젝트마다 다른 관심사를 처리할 때 수정을 최소화할 수 있다.
  3) 유지 보수를 쉽게할 수 있다.   
  
  * 위빙 : 분리된 관심사(기능)를 다시 해당 객체(모둘)에 삽입하는 것 
  * Advice : 관점이 분리되고 실행시 모듈에서 위빙된 구체적인 처리
    - Around Advice : JoinPoint 앞/뒤에서 실행. 
    - Before Advice : JOinPoint 앞에서 실행
    - After Return Advice : JoinPoint 메서드 호출이 정상 종료 후 실행
    - After Throwing Advice : 예외를 던질 때 실행(예외 발생)
    - Introduction : 클래스, 인터페이스 구현을 추가하는 특수한 경우
  * JoinPoint : 실행시 Advice 가 위빙하는 포인트.(메서드 호출, 예외처리)  
  * PointCut : Advice를 어디에 위빙 시키는지 결정하는 지점
    - 하나, 또는 복수의 JoinPoint를 묶은 것.
  * Advisor : Advice와 PointCut을 하나로 묶은 것. 즉..'관점'이다.
   
  * 프로그램의 흐름
  
  ===ㅁ======ㅁ===ㅁ====ㅁ===============================>
  	  \    /     |
  	    o        o
  
   ㅁ : 조인 포인트
  o : 포인트 컷
  
  
  
  
* 스프링 설정파일 
  spring 1.x 에서는 DTD(문서 형식 정의)기반의 스키마로 처리됨 
  
* SPRING 프레임워크 프로젝트 생성
  - 프로젝트를 진행하는 인원들이 WAS를 사용하는 가?
  -    "                Spring을 사용해본 적이 있는가?
  -    "                Model2 방식을 경험했는가?
  -    "                Tomcat과 같은 서버를 사용해본 적 있는 가?
  - WAS실행시 문제 해결이 가능한가?

  1) Spring Boot (Spring Starter Project 시작)
  => 빠른 개발의 형태, 최신 트렌트의 개발을 하기 위해 사용 => 스타트업 개발
  => 기본적인 설정없이 개발을 시작 가능(웹개발 초급자)
  => WAS 설정없이 사용 가능
  2) Spring 템플릿 (Spring Legacy Project 시작)
  => 위 조건을 어느정도 만족할 때 진행 SI 개발
  => 초반에 설정정보가 많음( 웹 개발 초급 이상)
  => 웹 프로젝트(JDBC)를 활용했던 경험이 있는 경우

* Maven 빌드도구가 정보를 찾아오는 곳
  -> https://mvnrepository.com/
  -> Maven : 프로젝트 관리도구(필요한 라이브러리를 가져오는 역할)
  
* 사용자명은 반드시 영문자로 작성!

* 시작 전 사용하는 자바의 버전을  1.8 버전으로 설정
  - pom.xml에서 변경
  - 프로젝트 설정 - Project Facets
  - 프로젝트 설정 - Java Compiler
  => Maven 업데이트시 설정 초기화됨!
 
* 수업 시 사용하는 버전 
  JDK 1.8 
  SPRING 4.3.8
  
* SPRING -MyBatis- MySQL
  https://mybatis.org/mybatis-3/ko/index.html
  
  * Spring 웹 프로젝트
  1) Presentation Layer
  -> UI 화면에 구성되는 요소들을 구현하는 층.(모바일, 웹)
  => View(.jsp), Controller
  2) Business (Logic) Layer
  -> 서비스 계층. 기능적인 요구사항을 구현하는 층.
  => Service 
  3) Data Access Layer(Persistence Layer)
  -> 데이터 처리 계층
  => DAO 처리, MyBatis
  4) DataBase
  
  * MyBatis
   : SQL Mapper 라이브러리. JDBC 작업으로 데이터 처리
   : 중복되는 부분들을 제거해서 간결하게 처리할 수 있도록 제공.
   : XML 파일을 사용해서 SQL문을 관리.
   
  * model2방식의 개발(스프링 MVC 패턴을 사용)
  
  model : 데이터처리 페이지  
  
  view : 데이터를 받아서 /그냥 화면을 보여주는 페이지
  
  controller : view/model 구분해서 동작 제어처리
  
  <기존의 model2>
  -> C <-> M
  	 |
  	 v
  	 
  	 V

  <스프링의 MVC>
  * 
  -> Front 
     Controller <-> Controller <-> Service(Model) <-> DAO <->MyBatis(Mapper) <-> MySQL
  	 |
  	 v
  	 
  	 View
  * 1) 사용자 요청 (request)
    2) FrontController 처리(개발자가 구현)
    3) View로 이동하는 경우를 제외하고, 나머지는 각각의 Controller 통해 제어
    4) 각 해당하는 동작을 처리하는 Service를 구현/처리(개발자 구현)
    5) DAO 객체를 통해서 처리
    6) MyBatis - Mapper 처리
    7) Mysql 결과 처리
    
  * 스프링 MVC에서의 역할
    - 스프링 작업 
      : URI를 분석해서 컨트롤로러 이동(검색)
      : 컨트롤러에 필여한 메서드 호출
      : 컨트롤러의 결과 데이터를 뷰로 전달
      : 적절한 뷰를 찾아가는 작업
    - 개발자 작업
      : 특정 주소 URI를 처리하는 컨트롤러를 설계
      : 서비스 객체를 생성-구현
      : DAO 객체 생성->구현
      : 컨트롤러에서 원하는 동작을 처리하기 위해 메서드로 설계
      : 뷰에서 전달될 데이터 출력
    
  * 스프링 MVC 컨트롤러의 역할
  1) 파리미터값 수집 : 해당 스프링MVC가 알아서 처리
  2) 상속, 구현 없이 어노테이션(@Controller)을 통해서 간편하게 설정 가능
  3) 로직에 대한 개발자 집중도가 증가.
  4) 테스트 처리가 편리함.-servlet-context.xml - 스프링MVC (웹과 관련된 정보) 설정 저장하는 파일
   



  

